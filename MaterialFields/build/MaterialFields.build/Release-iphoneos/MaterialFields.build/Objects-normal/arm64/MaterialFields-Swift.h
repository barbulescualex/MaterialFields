// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MaterialFields",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

/// Wrapper class for all fields. Makes data model validation and UI feedback a breeze.
/// attention:
///
/// DateField subclasses this but does not override the text variable as it holds a Date value type
SWIFT_CLASS("_TtC14MaterialFields5Field")
@interface Field : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Material version of the UITextView (multiline capable)
SWIFT_CLASS("_TtC14MaterialFields9AreaField")
@interface AreaField : Field <UIGestureRecognizerDelegate>
/// Required initializer if doing programtically. You can manually set the frame after initialization. Otherwise it relies on auto layout and it’s intrinsic content size.
/// warning:
/// If you want to define a frame for it, make sure the height constant is a minimum of 41.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Interface builder initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Notifies the field that it has been asked to relinquish its status as first responder in its window.
/// This triggers the end callback from the field and closes the keyboard, removes the editing state.
/// note:
/// If it’s in an error state it will keep its error UI.
///
/// returns:
/// true
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Asks UIKit to make the field the first responder in its window.
///
/// returns:
/// true if became first responder, false otherwise
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Asks UIKit to make the EntryField is the first responder.
/// Returns true if it becomes the first responder, false otherwise.
@property (nonatomic, readonly) BOOL isFirstResponder;
/// Returns a boolean indicating wether the EntryField can become the first responder
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



@class UITextView;

@interface AreaField (SWIFT_EXTENSION(MaterialFields)) <UITextViewDelegate>
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
@end


/// EntryFieldDelegate protocol. Forwards all UITextView delegate methods.
SWIFT_PROTOCOL("_TtP14MaterialFields17AreaFieldDelegate_")
@protocol AreaFieldDelegate
@optional
/// Asks the delegate if editing should begin in the specified AreaField.
/// \param view The AreaField that called the delegate method.
///
- (BOOL)areaFieldShouldBeginEditing:(AreaField * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that editing of the specified EntryField has begun.
/// \param view The AreaField that called the delegate method.
///
- (void)areaFieldDidBeginEditing:(AreaField * _Nonnull)view;
/// Asks the delegate if editing should stop in the specified EntryField.
/// \param view The AreaField that called the delegate method.
///
- (BOOL)areaFieldShouldEndEditing:(AreaField * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that editing of the specified EntryField has ended.
/// \param view The AreaField that called the delegate method.
///
- (void)areaFieldDidEndEditing:(AreaField * _Nonnull)view;
/// Asks the delegate whether the specified text should be replaced in the EntryField.
/// \param view The AreaField that called the delegate method.
///
/// \param range The current selection range. If the length of the range is 0, range reflects the current insertion point. If the user presses the Delete key, the length of the range is 1 and an empty string object replaces that single character.
///
/// \param view The text to insert.
///
- (BOOL)areaField:(AreaField * _Nonnull)view shouldChangeTextIn:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
@end


/// Material version of the UIDatePicker
SWIFT_CLASS("_TtC14MaterialFields9DateField")
@interface DateField : Field
/// Required initializer if doing programtically. You can manually set the frame after initialization. Otherwise it relies on auto layout and its intrinsic content size.
/// warning:
/// Refer to the Field Guide in the online documentation if you want to define height constraints.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Notifies the field that it has been asked to relinquish its status as first responder in its window.
/// This triggers the end callback from the field, closes the picker, and removes the editing state.
/// note:
/// If it’s in an error state it will keep its error UI.
///
/// returns:
/// true
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Opens the picker.
///
/// returns:
/// true
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Returns isActive flag.
@property (nonatomic, readonly) BOOL isFirstResponder;
/// Returns true
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



@class EntryField;

/// EntryFieldDelegate protocol. Forwards UITextField delegate methods.
SWIFT_PROTOCOL("_TtP14MaterialFields18EntryFieldDelegate_")
@protocol EntryFieldDelegate
@optional
/// Asks the delegate if editing should begin in the specified EntryField.
/// \param view The EntryField that called the delegate method
///
- (BOOL)entryFieldShouldBeginEditing:(EntryField * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that editing began in the specified EntryField.
/// \param view The EntryField that called the delegate method
///
- (void)entryFieldDidBeginEditing:(EntryField * _Nonnull)view;
/// Asks the delegate if editing should stop in the specified EntryField.
/// \param view The EntryField that called the delegate method
///
- (BOOL)entryFieldShouldEndEditing:(EntryField * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that editing stopped for the specified EntryField.
/// \param view The EntryField that called the delegate method
///
- (void)entryFieldDidEndEditing:(EntryField * _Nonnull)view;
/// Asks the delegate if the EntryField should process the pressing of the return button.
/// \param view The EntryField that called the delegate method
///
- (BOOL)entryFieldShouldReturn:(EntryField * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate if the EntryField’s current contents should be removed.
/// \param view The EntryField that called the delegate method
///
- (BOOL)entryFieldShouldClear:(EntryField * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
@end


@interface DateField (SWIFT_EXTENSION(MaterialFields)) <EntryFieldDelegate>
- (BOOL)entryFieldShouldBeginEditing:(EntryField * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
@end


/// PickerFieldDelegate protocol. Forwards editing state changes and content changes.
SWIFT_PROTOCOL("_TtP14MaterialFields17DateFieldDelegate_")
@protocol DateFieldDelegate
@optional
/// Asks the delegate if editing should begin in the specified DateField.
/// \param view The DateField that called the delegate method.
///
- (BOOL)dateFieldShouldBeginEditing:(DateField * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
@required
/// Tells the delegate editing ended in the specified DateField.
/// \param view The DateField that called the delegate method.
///
- (void)dateFieldDidEndEditing:(DateField * _Nonnull)view;
@optional
/// Tells the delegate that the contents have been cleared in the specified DateField.
/// \param view The DateField that called the delegate method.
///
- (void)dateFieldCleared:(DateField * _Nonnull)view;
/// Tells the delegate that a row was selected in the specified DateField.
/// \param view The DateField that called the delegate method.
///
/// \param row The row that was selected.
///
- (void)dateChanged:(DateField * _Nonnull)view;
@end


/// Material version of the UITextField (single line, for multiline capability use the <code>AreaField</code> class)
SWIFT_CLASS("_TtC14MaterialFields10EntryField")
@interface EntryField : Field <UIGestureRecognizerDelegate>
/// Required initializer if doing programtically. You can manually set the frame after initialization. Otherwise it relies on auto layout and its intrinsic content size.
/// warning:
/// Refer to the Field Guide in the online documentation if you want to define height constraints.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Interface builder initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Notifies the field that it has been asked to relinquish its status as first responder in its window.
/// This triggers the end callback from the field, closes the keyboard, and removes the editing state.
/// note:
/// If it’s in an error state it will keep its error UI.
///
/// returns:
/// true
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Asks UIKit to make the field the first responder in its window.
///
/// returns:
/// true if became first responder, false otherwise
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Asks UIKit to make the EntryField is the first responder.
/// Returns true if it becomes the first responder, false otherwise.
@property (nonatomic, readonly) BOOL isFirstResponder;
/// Returns a boolean indicating wether the EntryField can become the first responder
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



@class UITextField;

@interface EntryField (SWIFT_EXTENSION(MaterialFields)) <UITextFieldDelegate>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end




/// Material version of the UIPickerView (single column only, supports manual entry)
SWIFT_CLASS("_TtC14MaterialFields11PickerField")
@interface PickerField : Field
/// Required initializer if doing programtically. You can manually set the frame after initialization. Otherwise it relies on auto layout and its intrinsic content size.
/// warning:
/// Refer to the Field Guide in the online documentation if you want to define height constraints.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Notifies the field that it has been asked to relinquish its status as first responder in its window.
/// This triggers the end callback from the field, closes the picker, and removes the editing state.
/// note:
/// If it’s in an error state it will keep its error UI.
///
/// returns:
/// true
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Opens the picker or the PickerField is on manual entry it will open the keyboard.
///
/// returns:
/// true
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// Asks to see if the field is the first responder. If it is on manual entry it asks the entryField if it is the responder otherwise it returns its isActive flag
@property (nonatomic, readonly) BOOL isFirstResponder;
/// Returns a boolean indicating wether the field can become the first responder by asking the entryField if it can become the first responder
/// note:
/// Only use this if your PickerField is manualEntryCapable
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end




@interface PickerField (SWIFT_EXTENSION(MaterialFields)) <EntryFieldDelegate>
- (BOOL)entryFieldShouldBeginEditing:(EntryField * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (BOOL)entryFieldShouldReturn:(EntryField * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (void)entryFieldDidEndEditing:(EntryField * _Nonnull)view;
@end

@class UIPickerView;

@interface PickerField (SWIFT_EXTENSION(MaterialFields)) <UIPickerViewDataSource, UIPickerViewDelegate>
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
@end


/// PickerFieldDelegate protocol. Forwards editing state changes and content changes.
SWIFT_PROTOCOL("_TtP14MaterialFields19PickerFieldDelegate_")
@protocol PickerFieldDelegate
@optional
/// Asks the delegate if editing should begin in the specified PickerField.
/// \param view The PickerField that called the delegate method.
///
- (BOOL)pickerFieldShouldBeginEditing:(PickerField * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
@required
/// Tells the delegate editing ended in the specified PickerField.
/// \param view The PickerField that called the delegate method.
///
- (void)pickerFieldDidEndEditing:(PickerField * _Nonnull)view;
@optional
/// Tells the delegate that the contents have been cleared in the specified PickerField.
/// \param view The PickerField that called the delegate method.
///
- (void)pickerFieldCleared:(PickerField * _Nonnull)view;
/// Tells the delegate that a row was selected in the specified PickerField.
/// \param view The PickerField that called the delegate method.
///
/// \param row The row that was selected.
///
- (void)pickerField:(PickerField * _Nonnull)view didSelectRow:(NSInteger)row;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
